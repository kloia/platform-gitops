apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: loki
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  project: default
  destination:
    namespace: logging
    server: "https://kubernetes.default.svc"
  source:
    repoURL: https://grafana.github.io/helm-charts
    chart: loki
    targetRevision: "6.7.1"
    helm:
      valuesObject:
        chunksCache:
          enabled: false
        minio:
          enabled: false
        test:
          enabled: false
        lokiCanary:
          enabled: false
        serviceAccount:
          annotations:
            iam.gke.io/gcp-service-account: example-team-a@my-project.iam.gserviceaccount.com
          create: true
          name: "loki"
        loki:
          schemaConfig:
            configs:
              - from: "2024-04-01"
                store: tsdb
                object_store: gcs
                schema: v13
                index:
                  prefix: loki_index_
                  period: 24h
          storage:
            bucketNames:
              chunks: PATCH_ME
              ruler: PATCH_ME
              admin: PATCH_ME
            type: gcs
            gcs:
              chunkBufferSize: 0
              requestTimeout: "0s"
              enableHttp2: true
          limits_config:
            reject_old_samples: true
            reject_old_samples_max_age: 168h
            max_cache_freshness_per_query: 10m
            split_queries_by_interval: 15m
            query_timeout: 300s
            volume_enabled: true
            # add rate configuration
            ingestion_rate_mb: 100
            ingestion_burst_size_mb: 150
            per_stream_rate_limit: "100MB"
            per_stream_rate_limit_burst: "300MB"
          server:
            grpc_server_max_recv_msg_size: 8388608
        gateway:
          nginxConfig:
            serverSnippet: |-
              client_max_body_size 100M;
        write: 
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution: []
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: write
                  topologyKey: kubernetes.io/hostname
        backend: 
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution: []
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: backend
                  topologyKey: kubernetes.io/hostname
        read: 
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution: []
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: read
                  topologyKey: kubernetes.io/hostname
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
